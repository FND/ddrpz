#!/usr/bin/env bash

# type checking with support for directory-based configuration inheritance

set -eu

root_dir=`dirname "$0"`
root_dir=`realpath "$root_dir/.."`

tsconfig_base="./tsconfig.json"
tsconfig_actual="./tsconfig.tmp.json"
projects=(./src/server ./src/client)

quit() {
    rm "$tsconfig_actual" || true
}
trap quit EXIT

abort() {
	message="$@"

	echo "$message" >&2
	exit 1
}

cd "$root_dir"
# check each subproject seperately to account for varying configuration
for dir in "${projects[@]}"; do
	custom="$dir/tsconfig.json"
	if [ ! -f "$custom" ]; then
		cp "$tsconfig_base" "$tsconfig_actual"
	else # merge configuration files
		deno run --import-map ./deno.json - > "$tsconfig_actual" <<-EOS
import defaults from "$tsconfig_base" with { "type": "json" };
import custom from "$custom" with { "type": "json" };
import { dirname, join, normalize } from "@std/path";

// ensure we adhere to established conventions
if(normalize("$tsconfig_base") !== join(dirname("$custom"), custom.extends)) {
	console.error("ERROR: missing or invalid \`extends\` in \`$custom\`; " +
			"expected reference to \`" + join("$root_dir", "$tsconfig_base") + "\`");
	Deno.exit(1);
}

console.log(JSON.stringify({
	compilerOptions: {
		...defaults.compilerOptions,
		...custom.compilerOptions
	}
}, null, 4));
		EOS
	fi
	deno task verify -- "$dir"
done
